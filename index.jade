doctype html

html
  head
    title let's make some triangles
    
    style.
      html, body {
        width: 100%;
        height: 100%;
        margin: 0;
      }
      
      #triangles {
        position: absolute;
        height: 100%;
        width: 100%;
      }
  
  body
    canvas#triangles
    
    script#colors.
      var aquaish = '#55aaaa'
      var pastelPurple = '#aa55aa'
  
    script#triangle-math.
      function triangleHeightFromSideLength (l) {
        var l2 = Math.pow(l, 2)
        return Math.sqrt(3/4 * l2)
      }
    
    script.
      var canvas = document.getElementById('triangles')
      
      function resizeCanvas () {
        canvas.width  = window.innerWidth
        canvas.height = window.innerHeight
      }
      
      resizeCanvas()
      
      window.addEventListener('resize', resizeCanvas)

      var ctx = canvas.getContext('2d')
      ctx.imageSmoothingEnabled = false
      //ctx.translate(0.5, 0.5)
      
      // NOTE(jordan): equilateral
      function triangle (pen, x, y, base, height, color) {
        pen.beginPath()
        pen.moveTo(x, y)
        pen.lineTo(x + base/2, y - height)
        pen.lineTo(x + base, y)
        pen.fillStyle = color
        pen.fill()
      }
      
      var side = 50
      var height = triangleHeightFromSideLength(side)
      
      function drawTriangles () {
        //var numTriangles = 5
        //var triangleSide = canvas.width / numTriangles
        var triangleSide = 150
        var numTriangles = 1 + ((canvas.width / triangleSide) | 0)
        // NOTE(jordan): try removing the | 0 and notice the weird edge artifacts
        // unsure of the explanation, but I got the inspiration for the fix from
        // seeing how Math.floor can bug up canvas implementations by not resulting
        // in proper integers
        var triangleHeight = (triangleHeightFromSideLength(triangleSide) | 0)
        var baseX = -triangleSide/2, baseY = -triangleHeight
        
        for (var j = 0; j <= numTriangles; j++) {
          for (var i = 0; i <= numTriangles; i++) {
            var x = baseX + i * triangleSide
            var y = baseY + j * 2 * triangleHeight
            
            triangle(ctx, x, y, triangleSide, triangleHeight, aquaish)
            triangle(ctx, x, y, triangleSide, -triangleHeight, aquaish)
            
            ctx.save()
            
            ctx.translate(triangleSide/2, triangleHeight)
            
            triangle(ctx, x, y, triangleSide, triangleHeight, pastelPurple)
            triangle(ctx, x, y, triangleSide, -triangleHeight, pastelPurple)
            
            ctx.restore()
          }
        }
      }
      
      drawTriangles()
      window.addEventListener('resize', drawTriangles)
